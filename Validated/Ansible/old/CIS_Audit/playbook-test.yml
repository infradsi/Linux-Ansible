---
- name: CIS Linux Audit Playbook
  hosts: all
  become: true
  vars:
    remote_script_path: /ansible-tmp/linux_cis_audit.sh
    local_report_dir: /ansible-tmp/cis_reports
    script_timeout: 300  # 5 minutes timeout
  
  tasks:
    - name: Create local report directory
      file:
        path: "{{ local_report_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    - name: Verify source script exists
      stat:
        path: files/linux_cis_audit_v27.sh
      delegate_to: localhost
      register: local_script_check
      
    - name: Fail if source script not found
      fail:
        msg: "Source script files/linux_cis_audit_v27.sh not found"
      when: not local_script_check.stat.exists

    - name: Create remote script from local file
      copy:
        src: files/linux_cis_audit_v27.sh
        dest: "{{ remote_script_path }}"
        mode: '0755'
        backup: yes
      register: script_copy

    - name: Verify script was copied successfully
      stat:
        path: "{{ remote_script_path }}"
      register: remote_script_check

    - name: Fail if script copy failed
      fail:
        msg: "Failed to copy script to remote host"
      when: not remote_script_check.stat.exists

    - name: Clean up old report files
      shell: "rm -f /ansible-tmp/cis_audit_report_*"
      ignore_errors: yes

    - name: Check available disk space in /tmp
      shell: "df -h /tmp | tail -1 | awk '{print $4}'"
      register: disk_space
      
    - name: Display available disk space
      debug:
        msg: "Available space in /tmp: {{ disk_space.stdout }}"

    - name: Run the CIS audit script
      shell: "bash {{ remote_script_path }}"
      register: audit_result
      failed_when: audit_result.rc != 0
      async: "{{ script_timeout }}"
      poll: 10
      args:
        executable: /bin/bash
        chdir: /tmp

    - name: Display script execution summary
      debug:
        msg: |
          Script execution completed:
          - Return code: {{ audit_result.rc }}
          - Duration: {{ audit_result.delta }}
          - Command: {{ audit_result.cmd }}

    - name: Display script output (first 20 lines)
      debug:
        msg: "{{ audit_result.stdout_lines[:20] }}"
      when: audit_result.stdout_lines is defined and audit_result.stdout_lines | length > 0

    - name: Display script errors if any
      debug:
        msg: "Script errors: {{ audit_result.stderr }}"
      when: audit_result.stderr is defined and audit_result.stderr | length > 0

    - name: Find generated report files on remote host
      find:
        paths: /tmp
        patterns: 
          - 'cis_audit_report_*'
          - 'cis_*_report*'
          - '*cis*audit*'
        file_type: file
        age: -1h  # Files created in the last hour
      register: report_files

    - name: Debug found files
      debug:
        msg: |
          Found {{ report_files.files | length }} report files:
          {% for file in report_files.files %}
          - {{ file.path }} ({{ file.size }} bytes, {{ file.mtime | to_datetime }})
          {% endfor %}

    - name: List all files in /tmp for debugging
      shell: "ls -la /ansible-tmp/cis* /tmp/*audit* 2>/dev/null || echo 'No CIS audit files found'"
      register: tmp_files_debug
      
    - name: Display /tmp contents for debugging
      debug:
        msg: "Files in /tmp matching patterns: {{ tmp_files_debug.stdout_lines }}"

    - name: Create host-specific report directory
      file:
        path: "{{ local_report_dir }}/{{ inventory_hostname }}"
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Fetch reports from remote host
      fetch:
        src: "{{ item.path }}"
        dest: "{{ local_report_dir }}/{{ inventory_hostname }}/"
        flat: yes
        validate_checksum: yes
      loop: "{{ report_files.files }}"
      when: report_files.files | length > 0
      register: fetch_results

    - name: Display fetch results
      debug:
        msg: |
          Successfully fetched {{ fetch_results.results | length }} files:
          {% for result in fetch_results.results %}
          {% if result.dest is defined %}
          - {{ result.dest }}
          {% endif %}
          {% endfor %}
      when: fetch_results.results is defined

    - name: Warning if no reports found
      debug:
        msg: |
          ⚠️  ATTENTION: Aucun rapport CIS trouvé pour {{ inventory_hostname }}
          Vérifiez que le script génère bien des fichiers de rapport.
          Script de débogage disponible dans {{ remote_script_path }}
      when: report_files.files | length == 0

    - name: Create summary report
      template:
        src: templates/audit_summary.j2
        dest: "{{ local_report_dir }}/{{ inventory_hostname }}/audit_summary.txt"
      delegate_to: localhost
      vars:
        host_name: "{{ inventory_hostname }}"
        script_rc: "{{ audit_result.rc }}"
        script_duration: "{{ audit_result.delta }}"
        files_found: "{{ report_files.files | length }}"
        execution_time: "{{ ansible_date_time.iso8601 }}"
      when: report_files.files | length > 0

    - name: Cleanup remote script (optional)
      file:
        path: "{{ remote_script_path }}"
        state: absent
      when: cleanup_remote_files | default(false) | bool

    - name: Final summary
      debug:
        msg: |
          ✅ CIS Audit completed for {{ inventory_hostname }}:
          - Script executed: {{ 'SUCCESS' if audit_result.rc == 0 else 'FAILED' }}
          - Reports found: {{ report_files.files | length }}
          - Reports location: {{ local_report_dir }}/{{ inventory_hostname }}/
          {% if report_files.files | length > 0 %}
          - Report files: {{ report_files.files | map(attribute='path') | map('basename') | list | join(', ') }}
          {% endif %}